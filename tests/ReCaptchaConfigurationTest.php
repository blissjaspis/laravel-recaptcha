<?php

namespace BlissJaspis\ReCaptcha\Tests;

use BlissJaspis\ReCaptcha\ReCaptchaBuilder;
use BlissJaspis\ReCaptcha\ReCaptchaBuilderV2;

class ReCaptchaConfigurationTest extends TestCase
{

	protected $recaptcha;

	public function testGetApiSiteKey() {
		$this->assertEquals("api_site_key", $this->recaptcha->getApiSiteKey());
	}

	public function testGetApiSecretKey() {
		$this->assertEquals("api_secret_key", $this->recaptcha->getApiSecretKey());
	}

	public function testSkipIpWhiteListIsArray()
	{

		$ip_whitelist = $this->recaptcha->getIpWhitelist();
		$this->assertTrue(is_array($ip_whitelist));
		$this->assertCount(2, $ip_whitelist);

		$this->assertEquals('10.0.0.1', $ip_whitelist[0]);
		$this->assertEquals('10.0.0.2', $ip_whitelist[1]);
	}

	public function testCurlTimeoutIsSet()
	{

		$this->assertEquals(3, $this->recaptcha->getCurlTimeout());
	}

	protected function getEnvironmentSetUp($app)
	{

		$app['config']->set('recaptcha.api_site_key', 'api_site_key');
		$app['config']->set('recaptcha.api_secret_key', 'api_secret_key');
		$app['config']->set('recaptcha.skip_ip', '10.0.0.1,10.0.0.2');
		$app['config']->set('recaptcha.curl_timeout', 3);
	}

	protected function setUp(): void
	{

		parent::setUp(); // TODO: Change the autogenerated stub

		$this->recaptcha = recaptcha();
	}
}